/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-ccbf72d894d6b699175624f7a94244e68c9dbc6d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`app_issue_field_value_update_resource_period_update_issue_fields_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppIssueFieldValueUpdateResourcePeriodUpdateIssueFieldsPutError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`migration_resource_period_update_entity_properties_value_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MigrationResourcePeriodUpdateEntityPropertiesValuePutError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`migration_resource_period_workflow_rule_search_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MigrationResourcePeriodWorkflowRuleSearchPostError {
    Status400(),
    Status403(),
    UnknownValue(serde_json::Value),
}


/// Updates the value of a custom field added by Connect apps on one or more issues. The values of up to 200 custom fields can be updated.  **[Permissions](#permissions) required:** Only Connect apps can make this request
pub async fn app_issue_field_value_update_resource_period_update_issue_fields_put(configuration: &configuration::Configuration, atlassian_transfer_id: &str, connect_custom_field_values: models::ConnectCustomFieldValues) -> Result<serde_json::Value, Error<AppIssueFieldValueUpdateResourcePeriodUpdateIssueFieldsPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_atlassian_transfer_id = atlassian_transfer_id;
    let p_connect_custom_field_values = connect_custom_field_values;

    let uri_str = format!("{}/rest/atlassian-connect/1/migration/field", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Atlassian-Transfer-Id", p_atlassian_transfer_id.to_string());
    req_builder = req_builder.json(&p_connect_custom_field_values);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AppIssueFieldValueUpdateResourcePeriodUpdateIssueFieldsPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
pub async fn migration_resource_period_update_entity_properties_value_put(configuration: &configuration::Configuration, atlassian_transfer_id: &str, entity_type: &str, entity_property_details: Vec<models::EntityPropertyDetails>) -> Result<(), Error<MigrationResourcePeriodUpdateEntityPropertiesValuePutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_atlassian_transfer_id = atlassian_transfer_id;
    let p_entity_type = entity_type;
    let p_entity_property_details = entity_property_details;

    let uri_str = format!("{}/rest/atlassian-connect/1/migration/properties/{entityType}", configuration.base_path, entityType=crate::apis::urlencode(p_entity_type));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Atlassian-Transfer-Id", p_atlassian_transfer_id.to_string());
    req_builder = req_builder.json(&p_entity_property_details);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<MigrationResourcePeriodUpdateEntityPropertiesValuePutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
pub async fn migration_resource_period_workflow_rule_search_post(configuration: &configuration::Configuration, atlassian_transfer_id: &str, workflow_rules_search: models::WorkflowRulesSearch) -> Result<models::WorkflowRulesSearchDetails, Error<MigrationResourcePeriodWorkflowRuleSearchPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_atlassian_transfer_id = atlassian_transfer_id;
    let p_workflow_rules_search = workflow_rules_search;

    let uri_str = format!("{}/rest/atlassian-connect/1/migration/workflow/rule/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Atlassian-Transfer-Id", p_atlassian_transfer_id.to_string());
    req_builder = req_builder.json(&p_workflow_rules_search);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowRulesSearchDetails`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowRulesSearchDetails`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MigrationResourcePeriodWorkflowRuleSearchPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

